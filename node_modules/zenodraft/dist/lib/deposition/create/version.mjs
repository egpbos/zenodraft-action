var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { default as fetch } from 'node-fetch';
import { deposition_show_files } from '../../deposition/show/files';
import { file_delete } from '../../file/delete';
import { helpers_get_api } from '../../helpers/get-api';
import { metadata_update } from '../../metadata/update';
export const deposition_create_version = (token, sandbox, concept_id, verbose = false) => __awaiter(void 0, void 0, void 0, function* () {
    if (verbose) {
        console.log(`Creating a new, empty version in existing concept ${concept_id}...`);
    }
    const new_id = yield create_new_versioned_deposition(token, sandbox, concept_id, verbose);
    yield remove_files_from_draft(token, sandbox, new_id, verbose);
    yield metadata_update(token, sandbox, new_id, undefined, verbose);
    return new_id;
});
const create_new_versioned_deposition = (token, sandbox, concept_id, verbose = false) => __awaiter(void 0, void 0, void 0, function* () {
    if (verbose) {
        console.log(`Creating a new version off of latest version in concept...`);
    }
    const first_id = (parseInt(concept_id) + 1).toString();
    const api = helpers_get_api(sandbox);
    const endpoint = `/deposit/depositions/${first_id}/actions/newversion`;
    const headers = {
        'Authorization': `Bearer ${token}`
    };
    const url = `${api}${endpoint}`;
    const response = yield fetch(url, { method: 'POST', headers });
    if (response.ok !== true) {
        throw new Error(`Something went wrong on POST to ${url}: ${response.status} - ${response.statusText}`);
    }
    const deposition = yield response.json();
    const new_id = deposition.links.latest_draft.split('/').slice(-1)[0];
    if (verbose) {
        console.log(`Created new version with id ${new_id}`);
    }
    return new_id;
});
const remove_files_from_draft = (token, sandbox, id, verbose = false) => __awaiter(void 0, void 0, void 0, function* () {
    if (verbose) {
        console.log(`Removing any files from the newly drafted version...`);
    }
    const filenames = yield deposition_show_files(token, sandbox, id, verbose);
    for (const filename of filenames) {
        file_delete(token, sandbox, id, filename);
    }
});

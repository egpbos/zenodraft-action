"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deposition_show_draft = void 0;
const get_api_1 = require("../../helpers/get-api");
const node_fetch_1 = require("node-fetch");
const assert = require("assert");
const deposition_show_draft = (token, sandbox, concept_id, verbose = false) => __awaiter(void 0, void 0, void 0, function* () {
    const api = get_api_1.helpers_get_api(sandbox);
    const url = `${api}/deposit/depositions`;
    const response = yield node_fetch_1.default(url, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });
    const depositions = yield response.json();
    assert(depositions.constructor == Array, "Expected depositions to be an Array");
    if (depositions.length == 0) {
        throw new Error('(errid 5) You have no depositions yet');
    }
    const filtered = depositions.filter(deposition => deposition.conceptrecid === concept_id);
    if (filtered.length === 0) {
        throw new Error(`(errid 6) You have no depositions within concept ${concept_id}.`);
    }
    if (filtered.length > 1) {
        throw new Error(`(errid 7) Something went wrong getting the id for the latest draft for concept ${concept_id}.`);
    }
    if ('latest_draft' in filtered[0].links === false) {
        return '';
    }
    return filtered[0].links.latest_draft.split('/').slice(-1)[0];
});
exports.deposition_show_draft = deposition_show_draft;
//# sourceMappingURL=draft.js.map
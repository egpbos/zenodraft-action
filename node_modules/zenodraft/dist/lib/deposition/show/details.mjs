var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { default as fetch } from 'node-fetch';
import { helpers_get_api } from './../../helpers/get-api';
import * as assert from 'assert';
export const deposition_show_details = (token, sandbox, id, verbose = false) => __awaiter(void 0, void 0, void 0, function* () {
    const regex = /^[\d]+$/;
    assert(regex.test(id) === true, 'id has invalid format.');
    const api = helpers_get_api(sandbox);
    const url = `${api}/deposit/depositions/${id}`;
    const response = yield fetch(url, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });
    if (response.ok !== true) {
        throw new Error(`(errid 8) Something went wrong on GET to ${url}: ${response.status} - ${response.statusText}`);
    }
    return yield response.json();
});

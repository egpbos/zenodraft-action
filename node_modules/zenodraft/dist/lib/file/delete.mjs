var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { default as fetch } from 'node-fetch';
import { deposition_show_details } from '../deposition/show/details';
export const file_delete = (token, sandbox, version_id, filename, verbose = false) => __awaiter(void 0, void 0, void 0, function* () {
    if (verbose) {
        console.log(`deleting file ${filename} from deposition with id ${version_id}...`);
    }
    const deposition = yield deposition_show_details(token, sandbox, version_id, verbose);
    const headers = {
        'Authorization': `Bearer ${token}`
    };
    const url1 = `${deposition.links.files}`;
    const response1 = yield fetch(url1, { method: 'GET', headers });
    if (response1.ok !== true) {
        throw new Error(`Something went wrong on GET to ${url1}: ${response1.status} - ${response1.statusText} `);
    }
    const files = yield response1.json();
    const fileid = files.filter(file => file.filename == filename)[0].id;
    const url2 = `${deposition.links.files}/${fileid}`;
    const response2 = yield fetch(url2, { method: 'DELETE', headers });
    if (response2.ok !== true) {
        throw new Error(`Something went wrong on DELETE to ${url2}: ${response2.status} - ${response2.statusText} `);
    }
});
